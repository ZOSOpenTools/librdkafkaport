diff --git a/src/rdkafka_feature.c b/src/rdkafka_feature.c
index b32cdf68..92bbfad0 100644
--- a/src/rdkafka_feature.c
+++ b/src/rdkafka_feature.c
@@ -433,10 +433,24 @@ void rd_kafka_ApiVersions_copy(const struct rd_kafka_ApiVersion *src,
  * @returns a human-readable feature flag string.
  */
 const char *rd_kafka_features2str(int features) {
+#ifdef __MVS__
+        static pthread_key_t ret_key;
+        static pthread_key_t reti_key;
+        static int ret_key_s = 0;
+        static int reti_key_s = 0;
+        char **ret = NULL;
+        int *reti_p = NULL;
+        size_t size_of_ret = 256;
+        GET_KEY_VAL_ARRAY(ret_key,ret_key_s,ret,sizeof(char),4,256)
+        GET_KEY_VAL(reti_key,reti_key_s,reti_p,sizeof(int))
+#define reti (*reti_p)
+#else
         static RD_TLS char ret[4][256];
-        size_t of              = 0;
         static RD_TLS int reti = 0;
+#endif
+    
         int i;
+        size_t of              = 0;
 
         reti = (reti + 1) % 4;
 
@@ -445,17 +459,29 @@ const char *rd_kafka_features2str(int features) {
                 int r;
                 if (!(features & (1 << i)))
                         continue;
-
+#ifdef __MVS__
+                r = rd_snprintf(ret[reti] + of, size_of_ret - of, "%s%s",
+                                of == 0 ? "" : ",", rd_kafka_feature_names[i]);
+                if ((size_t)r > size_of_ret - of) {
+                        /* Out of space */
+                        memcpy(&ret[reti][size_of_ret - 3], "..", 3);
+#else
                 r = rd_snprintf(ret[reti] + of, sizeof(ret[reti]) - of, "%s%s",
                                 of == 0 ? "" : ",", rd_kafka_feature_names[i]);
                 if ((size_t)r > sizeof(ret[reti]) - of) {
                         /* Out of space */
                         memcpy(&ret[reti][sizeof(ret[reti]) - 3], "..", 3);
+#endif
                         break;
                 }
 
                 of += r;
         }
-
+#ifdef __MVS__
+        SET_KEY_VAL(reti_key,reti_p)
+        SET_KEY_VAL(ret_key,ret)
+        return ret[(*reti_p)];
+#else
         return ret[reti];
+#endif
 }

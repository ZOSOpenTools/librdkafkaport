diff --git a/src/rdkafka_ssl.c b/src/rdkafka_ssl.c
index 0dd7e509..fddf85ef 100644
--- a/src/rdkafka_ssl.c
+++ b/src/rdkafka_ssl.c
@@ -36,7 +36,9 @@
 #include "rdkafka_int.h"
 #include "rdkafka_transport_int.h"
 #include "rdkafka_cert.h"
-
+#ifdef __MVS__
+#include <zos-tls.h>
+#endif
 #ifdef _WIN32
 #include <wincrypt.h>
 #pragma comment(lib, "crypt32.lib")
@@ -105,10 +107,20 @@ rd_kafka_transport_ssl_clear_error(rd_kafka_transport_t *rktrans) {
  *          if no error.
  */
 const char *rd_kafka_ssl_last_error_str(void) {
+#ifdef __MVS__
+	static tls_t tls_errstr;
+	char *errstr = NULL;
+	size_t size_of_errstr = 256;
+#else
         static RD_TLS char errstr[256];
+#endif
         unsigned long l;
         const char *file, *data, *func;
         int line, flags;
+#ifdef __MVS__
+        tls_errstr.sz = sizeof(char)*size_of_errstr;
+        errstr = __tlsValue(&tls_errstr);
+#endif
 
 #if OPENSSL_VERSION_NUMBER >= 0x30000000
         l = ERR_peek_last_error_all(&file, &line, &func, &data, &flags);
@@ -119,8 +131,11 @@ const char *rd_kafka_ssl_last_error_str(void) {
 
         if (!l)
                 return "";
-
+#ifdef __MVS__
+        rd_snprintf(errstr, size_of_errstr, "%lu:%s:%s:%s:%d: %s", l,
+#else
         rd_snprintf(errstr, sizeof(errstr), "%lu:%s:%s:%s:%d: %s", l,
+#endif
                     ERR_lib_error_string(l), func, file, line,
                     ((flags & ERR_TXT_STRING) && data && *data)
                         ? data
@@ -1773,6 +1788,8 @@ static RD_UNUSED unsigned long rd_kafka_transport_ssl_threadid_cb(void) {
          * and thread id, which means we can't use the
          * thrd_current() API that returns the handle. */
         return (unsigned long)GetCurrentThreadId();
+#elif __MVS__
+        return (unsigned long)(intptr_t)thrd_current().__;
 #else
         return (unsigned long)(intptr_t)thrd_current();
 #endif

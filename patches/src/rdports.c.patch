diff --git a/src/rdports.c b/src/rdports.c
index 9af8ede5..6634ac76 100644
--- a/src/rdports.c
+++ b/src/rdports.c
@@ -41,8 +41,16 @@
  * on Win32 (qsort_s), OSX/FreeBSD (qsort_r with diff args):
  * http://forum.theorex.tech/t/different-declarations-of-qsort-r-on-mac-and-linux/93/2
  */
+#ifdef __MVS__
+#include <zos-tls.h>
+tls_t tls_rd_qsort_r_cmp;
+tls_t tls_rd_qsort_r_arg;
+int (*rd_qsort_r_cmp)(const void *, const void *, void *);
+void *rd_qsort_r_arg;
+#else
 static RD_TLS int (*rd_qsort_r_cmp)(const void *, const void *, void *);
 static RD_TLS void *rd_qsort_r_arg;
+#endif
 
 static RD_UNUSED int rd_qsort_r_trampoline(const void *a, const void *b) {
         return rd_qsort_r_cmp(a, b, rd_qsort_r_arg);
@@ -53,9 +61,30 @@ void rd_qsort_r(void *base,
                 size_t size,
                 int (*compar)(const void *, const void *, void *),
                 void *arg) {
+#ifdef __MVS__
+	void **tmp = NULL;
+	tls_rd_qsort_r_cmp.sz = sizeof(rd_qsort_r_cmp);
+	tls_rd_qsort_r_arg.sz = sizeof(rd_qsort_r_arg);
+	tmp = __tlsValue(&tls_rd_qsort_r_cmp);
+	*(void**)tmp = (void*)compar;
+	rd_qsort_r_cmp = ((int (*)(const void *, const void *,void *))*tmp);
+	rd_qsort_r_arg = __tlsValue(&tls_rd_qsort_r_arg);
+	memcpy(rd_qsort_r_arg,arg,sizeof(rd_qsort_r_arg));
+        qsort(base, nmemb, size, rd_qsort_r_trampoline);
+/* 
+        These resets are causing synchronization issues, so I am 
+        removing the reset statements. The issue is very intermittent and happens once or twice
+        in 100 runs.
+        rd_qsort_r_arg is not used at all
+        rd_qsort_r_cmp as of now this is pointing to a single function pointer
+*/
+        // rd_qsort_r_cmp = NULL;
+        // rd_qsort_r_arg = NULL;
+#else
         rd_qsort_r_cmp = compar;
         rd_qsort_r_arg = arg;
         qsort(base, nmemb, size, rd_qsort_r_trampoline);
         rd_qsort_r_cmp = NULL;
         rd_qsort_r_arg = NULL;
+#endif
 }

diff --git a/src/rdposix.h b/src/rdposix.h
index 0af59481..29b0c214 100644
--- a/src/rdposix.h
+++ b/src/rdposix.h
@@ -60,12 +60,15 @@
 #define RD_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
 #define RD_NORETURN           __attribute__((noreturn))
 #define RD_IS_CONSTANT(p)     __builtin_constant_p((p))
+#ifdef __MVS__
+#define RD_TLS  
+#else
 #define RD_TLS                __thread
-
+#endif
 /**
  * Allocation
  */
-#if !defined(__FreeBSD__) && !defined(__OpenBSD__)
+#if !defined(__FreeBSD__) && !defined(__OpenBSD__) && !defined(__MVS__)
 /* alloca(3) is in stdlib on FreeBSD */
 #include <alloca.h>
 #endif
@@ -136,20 +139,23 @@ static RD_INLINE RD_UNUSED const char *rd_strerror(int err) {
 /**
  * Misc
  */
-
+#ifdef __MVS__
+#define rd_usleep(usec, terminate) sleep((usec) / 1000000)
+#else
 /**
  * Microsecond sleep.
  * Will retry on signal interrupt unless *terminate is true.
  */
 static RD_INLINE RD_UNUSED void rd_usleep(int usec, rd_atomic32_t *terminate) {
         struct timespec req = {usec / 1000000, (long)(usec % 1000000) * 1000};
-
+	
+	
         /* Retry until complete (issue #272), unless terminating. */
         while (nanosleep(&req, &req) == -1 &&
                (errno == EINTR && (!terminate || !rd_atomic32_get(terminate))))
                 ;
 }
-
+#endif
 
 
 #define rd_gettimeofday(tv, tz) gettimeofday(tv, tz)
